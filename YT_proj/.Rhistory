mods[[2]] = loop_through_fn(om = om_with_data,
em_info = info,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 2,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
hcr.type = 1,
seed = 123,
save.sdrep = FALSE)
mods[[2]] = loop_through_fn(om = om_with_data,
em_info = info,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 2,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
#hcr.type = 1,
seed = 123,
save.sdrep = FALSE)
mods[[2]] = loop_through_fn(om = m4_with_data,
em_info = input4,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 2,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
#hcr.type = 1,
seed = 123,
save.sdrep = FALSE)
input4$par_inputs$n_indices
View(input4)
View(asap4)
library(wham)
library(whamMSE)
main.dir = here::here()
knitr::opts_chunk$set(echo = TRUE)
library(wham)
library(whamMSE)
main.dir = here::here()
year_start  <- 1  # starting year in the burn-in period
year_end    <- 20  # end year in the burn-in period
MSE_years   <- 3     # number of years in the feedback loop
# Note: no need to include MSE_years in simulation-estimation
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "F-H-L", Fmax = 2, Fmin = 1, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625)
basic_info = info$basic_info # collect basic information
catch_info = info$catch_info # collect fleet catch information
index_info = info$index_info # collect survey information
F_info = info$F # collect fishing information
# see more details using ?generate_basic_info
# Movement Type and rate
basic_info <- generate_NAA_where(basic_info = basic_info, move.type = 2) # "bidirectional" movement
move <- generate_move(basic_info = basic_info, move.type = 2, move.rate = c(0.3,0.1),
move.re = "iid_y", move.sigma = 0.5, prior.sigma = 0.5, use.prior = TRUE)
#Configure selectivity and natural mort
n_stocks  <- as.integer(basic_info['n_stocks'])
n_regions <- as.integer(basic_info['n_regions'])
n_fleets  <- as.integer(basic_info['n_fleets'])
n_indices <- as.integer(basic_info['n_indices'])
n_ages    <- as.integer(basic_info['n_ages'])
# Selectivity Configuration
fleet_pars <- c(5,1)
index_pars <- c(2,1)
sel <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
# M Configuration
M <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
# Configure NAA <- BHolt model with NAA deviations treated as random effects with IID(sigma = 0.2)
sigma      <- "rec+1"
re_cor     <- "iid"
ini.opt    <- "equilibrium" # option   <- c("age-specific-fe", "equilibrium")
# Set para. for B-H function
alpha <- 12
beta  <- 1.5e-4
# Set sigma for NAA
NAA_sig <- 0.2
sigma_vals = array(NAA_sig, dim = c(n_stocks, n_regions, n_ages)) # n_stocks x n_regions x n_ages"
# Set initial NAA for each stock
log_N1  <- rep(10, n_stocks) # Create difference between stocks
N1_pars <- generate_ini_N1(log_N1,basic_info,ini.opt)
NAA_re <- list(N1_model=rep(ini.opt,n_stocks),
sigma=rep(sigma,n_stocks),
cor=rep(re_cor,n_stocks),
recruit_model = 3,
recruit_pars = rep(list(c(alpha,beta)),n_stocks), # assume same B-H s-r functions for all stocks
sigma_vals = sigma_vals,
N1_pars = N1_pars,
NAA_where = basic_info$NAA_where)
# recruit_model = 1: estimating annual recruitments as fixed effects or a random walk if NAA_re$sigma specified
# recruit_model = 2: estimating a mean recruitment with annual recruitments as random effects
# recruit_model = 3: Beverton-Holt stock-recruitment with annual recruitments as random effects
# recruit_model = 4: Ricker stock-recruitment with annual recruitments as random effects
# 1. recruit_pars: a list (length = n_stocks) of vectors of initial parameters for recruitment model.
# If $recruit_model is 3 (B-H) or 4 (Ricker), parameters are "alpha" and "beta".
# 2. sigma_vals: Initial standard deviation values to use for the NAA deviations. Values are not used if recruit_model = 1
# If sigma="rec": must be a list (length = n_stocks) of single values
# If sigma="rec+1": a list (length = n_stocks) of 2 values must be specified. First is for the first age class (recruits), second is for all other ages.
r
input <- prepare_wham_input(basic_info = basic_info,
selectivity = sel,
M = M,
NAA_re = NAA_re,
move = move,
catch_info = catch_info,
index_info = index_info,
F = F_info)
random = input$random # check what processes are random effects
input$random = NULL # so inner optimization won't change simulated RE
om <- fit_wham(input, do.fit = F, do.brps = T, MakeADFun.silent = TRUE)
om <- fit_wham(input, do.fit = F, do.brps = T, MakeADFun.silent = TRUE)
om_with_data <- update_om_fn(om, seed = 123, random = random)
# I think this is where I went wrong on the last one but still unclear why
assess.interval <- 3 # Note: assessment interval is 3 years, given the feedback period is 3 years, there will be only 1 assessment
base.years      <- year_start:year_end # Burn-in period
first.year      <- head(base.years,1)
terminal.year   <- tail(base.years,1)
assess.years    <- seq(terminal.year, tail(om$years,1)-assess.interval,by = assess.interval)
mods <- list() # Create a list to save MSE outputs
# EM1
n_stocks = n_regions = n_fleets = n_indices = 1
sel_em <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
NAA_re_em <- list(N1_model="equilibrium",sigma="rec+1",cor="iid")
M_em <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
mods[[1]] = loop_through_fn(om = om_with_data,
em_info = info,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 1,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
hcr.type = 1,
seed = 123,
save.sdrep = FALSE,
save.last.em = TRUE)
mods[[1]] = loop_through_fn(om = om_with_data,
em_info = info,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 1,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
#hcr.type = 1, # uNUSED ARGUMENT
seed = 123,
save.sdrep = FALSE,
save.last.em = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(wham)
library(whamMSE)
main.dir = here::here()
year_start  <- 1  # starting year in the burn-in period
year_end    <- 20  # end year in the burn-in period
MSE_years   <- 3     # number of years in the feedback loop
# Note: no need to include MSE_years in simulation-estimation
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "F-H-L", Fmax = 2, Fmin = 1, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625)
basic_info = info$basic_info # collect basic information
catch_info = info$catch_info # collect fleet catch information
index_info = info$index_info # collect survey information
F_info = info$F # collect fishing information
# see more details using ?generate_basic_info
# Movement Type and rate
basic_info <- generate_NAA_where(basic_info = basic_info, move.type = 2) # "bidirectional" movement
move <- generate_move(basic_info = basic_info, move.type = 2, move.rate = c(0.3,0.1),
move.re = "iid_y", move.sigma = 0.5, prior.sigma = 0.5, use.prior = TRUE)
#Configure selectivity and natural mort
n_stocks  <- as.integer(basic_info['n_stocks'])
n_regions <- as.integer(basic_info['n_regions'])
n_fleets  <- as.integer(basic_info['n_fleets'])
n_indices <- as.integer(basic_info['n_indices'])
n_ages    <- as.integer(basic_info['n_ages'])
# Selectivity Configuration
fleet_pars <- c(5,1)
index_pars <- c(2,1)
sel <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
# M Configuration
M <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
# Configure NAA <- BHolt model with NAA deviations treated as random effects with IID(sigma = 0.2)
sigma      <- "rec+1"
re_cor     <- "iid"
ini.opt    <- "equilibrium" # option   <- c("age-specific-fe", "equilibrium")
# Set para. for B-H function
alpha <- 12
beta  <- 1.5e-4
# Set sigma for NAA
NAA_sig <- 0.2
sigma_vals = array(NAA_sig, dim = c(n_stocks, n_regions, n_ages)) # n_stocks x n_regions x n_ages"
# Set initial NAA for each stock
log_N1  <- rep(10, n_stocks) # Create difference between stocks
N1_pars <- generate_ini_N1(log_N1,basic_info,ini.opt)
NAA_re <- list(N1_model=rep(ini.opt,n_stocks),
sigma=rep(sigma,n_stocks),
cor=rep(re_cor,n_stocks),
recruit_model = 3,
recruit_pars = rep(list(c(alpha,beta)),n_stocks), # assume same B-H s-r functions for all stocks
sigma_vals = sigma_vals,
N1_pars = N1_pars,
NAA_where = basic_info$NAA_where)
# recruit_model = 1: estimating annual recruitments as fixed effects or a random walk if NAA_re$sigma specified
# recruit_model = 2: estimating a mean recruitment with annual recruitments as random effects
# recruit_model = 3: Beverton-Holt stock-recruitment with annual recruitments as random effects
# recruit_model = 4: Ricker stock-recruitment with annual recruitments as random effects
# 1. recruit_pars: a list (length = n_stocks) of vectors of initial parameters for recruitment model.
# If $recruit_model is 3 (B-H) or 4 (Ricker), parameters are "alpha" and "beta".
# 2. sigma_vals: Initial standard deviation values to use for the NAA deviations. Values are not used if recruit_model = 1
# If sigma="rec": must be a list (length = n_stocks) of single values
# If sigma="rec+1": a list (length = n_stocks) of 2 values must be specified. First is for the first age class (recruits), second is for all other ages.
input <- prepare_wham_input(basic_info = basic_info,
selectivity = sel,
M = M,
NAA_re = NAA_re,
move = move,
catch_info = catch_info,
index_info = index_info,
F = F_info)
random = input$random # check what processes are random effects
input$random = NULL # so inner optimization won't change simulated RE
om <- fit_wham(input, do.fit = F, do.brps = T, MakeADFun.silent = TRUE)
# Note: do.fit must be FALSE (no modeling fitting yet)
om_with_data <- update_om_fn(om, seed = 123, random = random)
# I think this is where I went wrong on the last one but still unclear why
assess.interval <- 3 # Note: assessment interval is 3 years, given the feedback period is 3 years, there will be only 1 assessment
base.years      <- year_start:year_end # Burn-in period
first.year      <- head(base.years,1)
terminal.year   <- tail(base.years,1)
assess.years    <- seq(terminal.year, tail(om$years,1)-assess.interval,by = assess.interval)
mods <- list() # Create a list to save MSE outputs
# EM1
n_stocks = n_regions = n_fleets = n_indices = 1
sel_em <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
NAA_re_em <- list(N1_model="equilibrium",sigma="rec+1",cor="iid")
M_em <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
mods[[1]] = loop_through_fn(om = om_with_data,
em_info = info,
random = random,
M_em = M_em,
sel_em = sel_em,
NAA_re_em = NAA_re_em,
move_em = NULL,
age_comp_em = "multinomial",
em.opt = list(separate.em = TRUE, separate.em.type = 1,
do.move = FALSE, est.move = FALSE),
assess_years = assess.years,
assess_interval = assess.interval,
base_years = base.years,
year.use = 20, # number of years of data you want to use in the assessment model
#hcr.type = 1, # uNUSED ARGUMENT
seed = 123,
save.sdrep = FALSE,
save.last.em = TRUE)
library(wham)
library(whamMSE)
main.dir = here::here()
year_start  <- 1  # starting year in the burn-in period
year_end    <- 20  # end year in the burn-in period
MSE_years   <- 0     # number of years in the feedback loop
# Note: no need to include MSE_years in simulation-estimation
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "constant", Fmax = 0.4, Fmin = 0.2, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625,
fracyr_seasons = NULL,
fleet_pointer = NULL,
index_pointer = NULL,
user_waa = NULL,
user_maturity = NULL,
bias.correct.process = FALSE,
bias.correct.observation = FALSE,
bias.correct.BRPs = FALSE,
mig_type = 0,
XSPR_R_opt = 2,
move_dyn = 0, # natal homing is assumed
onto_move = 0,
onto_move_pars = NULL,
apply_re_trend = 0,
trend_re_rate = NULL,
apply_mu_trend = 0,
trend_mu_rate = NULL,
age_mu_devs = NULL)
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "constant", Fmax = 0.4, Fmin = 0.2, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625,
fracyr_seasons = NULL,
# fleet_pointer = NULL,
# index_pointer = NULL,
user_waa = NULL,
user_maturity = NULL,
bias.correct.process = FALSE,
bias.correct.observation = FALSE,
bias.correct.BRPs = FALSE,
mig_type = 0,
XSPR_R_opt = 2,
move_dyn = 0, # natal homing is assumed
onto_move = 0,
onto_move_pars = NULL,
apply_re_trend = 0,
trend_re_rate = NULL,
apply_mu_trend = 0,
trend_mu_rate = NULL,
age_mu_devs = NULL)
basic_info = info$basic_info # collect basic information
catch_info = info$catch_info # collect fleet catch information
index_info = info$index_info # collect survey information
F_info = info$F # collect fishing information
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("timjmiller/wham", dependencies=TRUE)
# devtools::install_github("lichengxue/wham-devel", dependencies=TRUE)
# devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
library(wham)
library(whamMSE)
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj")
write.dir <- "C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
# Read in data files
# TO DO: ASK WHAT EACH OF THESE ARE (TWO GOM STOCKS, TWO SNE (but one doesn't work so idk))
# FIGURE OUT HOW TO PULL THESE YOURSELF. OR WAIT TILL DATA COMES OUT (see Jessie email)
CCGOM <- read_asap3_dat("ASAP Dat files/CCGOM.DAT")
CCGOM_alt3 <- read_asap3_dat("ASAP Dat files/CCGOM_alt3.DAT")
GBK <- read_asap3_dat("ASAP Dat files/GBK.DAT")
# SNE_2023 <- read_asap3_dat("ASAP Dat files/sne_asap_2023_RT.DAT") this one doesnt work. WHY? Accordign to Jessie this is the right one so figure it out
SNEMA<- read_asap3_dat("ASAP Dat files/SNEMA_split.DAT")
knitr::opts_chunk$set(echo = TRUE)
library(wham)
library(whamMSE)
main.dir = here::here()
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("timjmiller/wham", dependencies=TRUE)
# devtools::install_github("lichengxue/wham-devel", dependencies=TRUE)
# devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
library(wham)
library(whamMSE)
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj")
write.dir <- "C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
# Read in data files
# TO DO: ASK WHAT EACH OF THESE ARE (TWO GOM STOCKS, TWO SNE (but one doesn't work so idk))
# FIGURE OUT HOW TO PULL THESE YOURSELF. OR WAIT TILL DATA COMES OUT (see Jessie email)
CCGOM <- read_asap3_dat("ASAP Dat files/CCGOM.DAT")
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("timjmiller/wham", dependencies=TRUE)
# devtools::install_github("lichengxue/wham-devel", dependencies=TRUE)
# devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
library(wham)
library(whamMSE)
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj")
write.dir <- "C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
# Read in data files
# TO DO: ASK WHAT EACH OF THESE ARE (TWO GOM STOCKS, TWO SNE (but one doesn't work so idk))
# FIGURE OUT HOW TO PULL THESE YOURSELF. OR WAIT TILL DATA COMES OUT (see Jessie email)
CCGOM <- read_asap3_dat("ASAP Dat files/CCGOM.DAT")
CCGOM_alt3 <- read_asap3_dat("ASAP Dat files/CCGOM_alt3.DAT")
GBK <- read_asap3_dat("ASAP Dat files/GBK.DAT")
# SNE_2023 <- read_asap3_dat("ASAP Dat files/sne_asap_2023_RT.DAT") this one doesnt work. WHY? Accordign to Jessie this is the right one so figure it out
SNEMA<- read_asap3_dat("ASAP Dat files/SNEMA_split.DAT")
SNE_2023 <- read_asap3_dat("ASAP Dat files/sne_asap_2023_RT.DAT") this one doesnt work. WHY? Accordign to Jessie this is the right one so figure it out
SNE_2023 <- read_asap3_dat("ASAP Dat files/sne_asap_2023_RT.DAT") # this one doesnt work. WHY? Accordign to Jessie this is the right one so figure it out
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("timjmiller/wham", dependencies=TRUE)
# devtools::install_github("lichengxue/wham-devel", dependencies=TRUE)
# devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
library(wham)
library(whamMSE)
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj")
write.dir <- "C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
# Read in data files
# TO DO: ASK WHAT EACH OF THESE ARE (TWO GOM STOCKS, TWO SNE (but one doesn't work so idk))
# FIGURE OUT HOW TO PULL THESE YOURSELF. OR WAIT TILL DATA COMES OUT (see Jessie email)
CCGOM <- read_asap3_dat("ASAP Dat files/CCGOM.DAT") # For some reason I needed to redownload this file after running this script
CCGOM_alt3 <- read_asap3_dat("ASAP Dat files/CCGOM_alt3.DAT")
GBK <- read_asap3_dat("ASAP Dat files/GBK.DAT")
# SNE_2023 <- read_asap3_dat("ASAP Dat files/sne_asap_2023_RT.DAT") # this one doesnt work. WHY? Accordign to Jessie this is the right one so figure it out
SNEMA<- read_asap3_dat("ASAP Dat files/SNEMA_split.DAT")
# I'm just naming this asap 4 to compare to the example file but eventually need to figure out how to do multiple stocks
asap4 <- CCGOM
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
asap3 <- read_asap3_dat("ex1_SNEMAYT.dat")
# recruitment model: random about mean, no S-R function (recruit_model = 2)
# recruitment deviations: independent random effects (NAA_re = list(sigma="rec", cor="iid"))
# selectivity: age-specific (fix sel=1 for ages 4-5 in fishery, age 4 in index1, and ages 2-4 in index2)
input1 <- prepare_wham_input(asap4, recruit_model=2, model_name="Trying one stock: GOM Yellowtail Flounder",
# selectivity=list(model=rep("age-specific",11),
#     re=rep("none",11),
#     initial_pars=list(c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5),
#                       c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5),
#                       c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5),
#                       c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5)),
#     fix_pars=list(4:5,4,2:4,
#                   4:5,4,2:4,
#                   4:5,4,2:4,
#                   4:5,4)),
NAA_re = list(sigma="rec", cor="iid")) # Including selectivity throws an error I haven't fixed yet
# Fit model then check convergence
m1 <- fit_wham(input1, do.osa = F) # turn off OSA residuals to save time in ex
check_convergence(m1) # Has converged. party.
# # OG CODE
# input1 <- prepare_wham_input(asap3, recruit_model=2, model_name="Ex 1: SNEMA Yellowtail Flounder",
#                               selectivity=list(model=rep("age-specific",3),
#                                   re=rep("none",3),
#                                   initial_pars=list(c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5)),
#                                   fix_pars=list(4:5,4,2:4)),
#                               NAA_re = list(sigma="rec", cor="iid"))
input2 <- prepare_wham_input(asap4, recruit_model=2, model_name="Ex 1: SNEMA Yellowtail Flounder",
# selectivity=list(model=rep("age-specific",3),
#     re=rep("none",3),
#     initial_pars=list(c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5)),
#     fix_pars=list(4:5,4,2:4)),
NAA_re = list(sigma="rec", cor="iid"),
age_comp = "logistic-normal-miss0")
m2 <- fit_wham(input2, do.osa = F) # turn off OSA residuals to save time in ex
check_convergence(m2) # Converged
input3 <- prepare_wham_input(asap4, recruit_model=2, model_name="Ex 1: SNEMA Yellowtail Flounder",
# selectivity=list(model=rep("age-specific",3),
#     re=rep("none",3),
#     initial_pars=list(c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5)),
#     fix_pars=list(4:5,4,2:4)),
NAA_re = list(sigma="rec+1", cor="iid"))
m3 <- fit_wham(input3, do.osa = F) # turn off OSA residuals to save time in ex
check_convergence(m3)
input4 <- prepare_wham_input(asap4, recruit_model=2, model_name="Ex 1: SNEMA Yellowtail Flounder",
# selectivity=list(model=rep("age-specific",3),
#     re=rep("none",3),
#     initial_pars=list(c(0.5,0.5,0.5,1,1,0.5),c(0.5,0.5,0.5,1,0.5,0.5),c(0.5,1,1,1,0.5,0.5)),
#     fix_pars=list(4:5,4,2:4)),
NAA_re = list(sigma="rec+1", cor="iid"),
age_comp = "logistic-normal-miss0")
m4 <- fit_wham(input4, do.osa = F) # turn off OSA residuals to save time in ex
