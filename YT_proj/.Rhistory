numList <- list(10)
View(numList)
x <- 10
total <- x
numList <- c(x)
while(total <= 360){
x <- x * 1.22
numList <- c(numList, x)
total <- total + x
}
numList
sum(numList)
sum(numList)-89.11650
x <- 10
total <- x
numList <- c(x)
while(total <= 360){
x <- x * 1.22
numList <- c(numList, x)
total <- total + x
}
numList
numList <- numlist[-12]
numList <- numList[-12]
numList
for(i in 1:length(numList)){
if(i%%4 == 0){
numList[i] <- NA
}
slices <- sum(!is.na(numList))
area <- (sum(numList)/360) * pi * (5**2)
}
area
slices
numList
sum(numList)
x <- 10
total <- x
numList <- c(x)
while(total <= 360){
x <- x * 1.22
numList <- c(numList, x)
total <- total + x
}
numList
numList <- numList[-12]
for(i in 1:length(numList)){
if(i%%4 == 0){
numList[i] <- NA
}
slices <- sum(!is.na(numList))
area <- (sum(numList, na.rm=T)/360) * pi * (5**2)
}
area
firstHOur(2) + secondHOur(.5)
firstHOur <- function(x){
T = ((1/5) * x) + ((1/6) * x) + ((1/8) * x) - ((1/10) * x)
return(T)
}
secondHOur <- function(x){
T = ((1/5) * x) + ((1/8) * x) - ((1/10) * x)
return(T)
}
remainHour <- function(x){
T = ((1/5) * x) + ((1/8) * x) - ((1/10) * x)
return(T)
}
firstHOur(2) + secondHOur(.5)
firstHOur(2) + secondHOur(.5) + remainHour(1)
firstHOur(2) + secondHOur(.5) + remainHour(.5)
firstHOur(2) + secondHOur(.5) + remainHour(.4)
firstHOur(2) + secondHOur(.5) + remainHour(.45)
firstHOur(2) + secondHOur(.5) + remainHour(.5)
firstHOur(2) + secondHOur(.5)
43/48
remainHour(1)
remainHour(.5)
remainHour <- function(x){
T = ((1/5) * x) - ((1/10) * x)
return(T)
}
remainHour(.5)
remainHour(1)
firstHOur(2) + secondHOur(.5) + remainHour(1)
x <- 10
total <- x
numList <- c(x)
while(total <= 360){
x <- x * 1.22
numList <- c(numList, x)
total <- total + x
}
numList
sum(numList)
numList <- numList[-12]
sum(numList)
for(i in 1:length(numList)){
if(i%%4 == 0){
numList[i] <- NA
}
slices <- sum(!is.na(numList))
area <- (sum(numList, na.rm=T)/360) * pi * (5**2)
}
area
slices
# pak::pkg_install("timjmiller/wham@lab", lib = "C:/Users/alex.hansell/AppData/Local/Programs/R/R-4.2.2/library/multi_wham/")
pak::pkg_install("timjmiller/wham", lib = "C:/Users/swulfing/AppData/Local/Programs/R/R-4.4.3/library/wham_test")
library(wham, lib.loc = "C:/Users/swulfing/AppData/Local/Programs/R/R-4.4.3/library/wham_test")
require(tidyr)
require(dplyr)
require(readxl)
require(purrr)
require(here)
require(ggplot2) # C:\Users\swulfing\AppData\Local\Programs\R\R-4.4.3\library
write.dir <- "C:/Users/swulfing/Documents/GitHub/UMassD/YT_proj"
setwd(write.dir)
gb_dat <- read_asap3_dat(here("C:/Users/swulfing/Documents/GitHub/UMassD/YT_proj/ASAPfiles_5.14Pull/GBK.DAT"))
env.dat <- read.csv("CI_indices.csv")
env.dat<-env.dat%>%
filter(Year > 1972)
ecov <- list(
label = "bt_temp",
mean = as.matrix(env.dat$bt_temp),
logsigma = 'est_1', # estimate obs sigma, 1 value shared across years
year = env.dat$Year,
use_obs = matrix(1, ncol=1, nrow=dim(env.dat)[1]),
#lag =1,# use all obs (=1)
process_model = "ar1") #, # "rw" or "ar1"
ecov$recruitment_how <- matrix("controlling-lag-1-linear") #add recruitment how to ecov
#Trying to fix all selectivities
sel2=list(
model=c("age-specific",
"logistic","logistic","logistic"),
re = c("none","none","none","none"), #re = c("ar1_y","none","none","none"), use ar1 to est sel but later fixing all
initial_pars=list(
c(0.1,0.25,0.5,1,1,1), # Commercial fleet
c(2,0.3), # Spring NEFSC
c(2,0.3), # Fall NEFSC
c(2,0.3)), # DFO survey
fix_pars = list(
c(4:6), # Estimate param for each age
c(NULL), # bc logistic, these only estimate 2 params so just want to fix first one
c(NULL),
c(NULL))
)
gb_datM<-gb_dat
gb_datM[[1]]$dat$M[,1]<-0.57 # From working paper on research track. Final model so not super important for us
gb_datM[[1]]$dat$M[,2]<-0.33
gb_datM[[1]]$dat$M[,3]<-0.26
gb_datM[[1]]$dat$M[,4]<-0.23
gb_datM[[1]]$dat$M[,5]<-0.22
gb_datM[[1]]$dat$M[,6]<-0.22
input3 <- prepare_wham_input(gb_dat,
selectivity=sel2,
recruit_model=2, # This is bev-holt recruitment fxn. They use two params. 103-111 are tweaking those params
age_comp = "logistic-normal-pool0",
#NAA_re = list(sigma="rec+1", cor ="iid"),
#ecov = ecov,
model_name="Run28"
#basic_info = list(simulate_process_error = rep(FALSE, 5))
)
mT <- fit_wham(input3, MakeADFun.silent = FALSE ,do.osa = F, do.retro = F, do.fit = T)
x <- read_asap3_dat("C:/Users/swulfing/Documents/GitHub/UMassD/WHAMTutorial/AHansellWHAM_test/runspring22_asap_sample_size.dat")
#### Run 1: Like asap ####
sel=list(model=c("age-specific","age-specific","age-specific","age-specific"),
re = c("none","none","none","none"),
initial_pars=list(c(0.1,0.25,0.5,1,1,1,1),
c(0.1,0.25,0.5,1,1,1,1),
c(0.1,0.25,0.5,1,1,1,1),
c(0.1,0.25,0.5,1,1,1,1)),
fix_pars = list(
c(4:7),
c(4:7),
c(4:7),
c(4:7)))
input <- prepare_wham_input(x,
selectivity=sel,
#recruit_model=2,
#age_comp = list(fleets = rep("multinomial",1),
#                indices = rep("multinomial", 3)),
#selectivity=sel,
# NAA_re =NAA_list,
#NAA_re = list(sigma="rec", cor ="iid"),
# catchability = q,
model_name="asap_like")
m1 <- fit_wham(input,do.osa = F, do.retro = F)
check_convergence(m1)
