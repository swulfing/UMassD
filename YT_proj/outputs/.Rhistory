devtools::install_github("timjmiller/wham", dependencies=TRUE)
install.packages("devtools")
library(wham)
devtools::install_github("timjmiller/wham", dependencies=TRUE)
pkgbuild::check_build_tools(debug = TRUE)
library(wham)
devtools::install_github("timjmiller/wham", dependencies=TRUE)
devtools::install_github("timjmiller/wham", dependencies=TRUE)
install.packages("pak")
pak::pkg_install("timjmiller/wham")
pkgbuild::check_build_tools(debug = TRUE)
install.packages("make")
pak::pkg_install("timjmiller/wham")
pkgbuild::check_build_tools(debug = TRUE)
library(pak)
pak::pkg_install("timjmiller/wham")
pkgbuild::check_build_tools(debug = TRUE)
install.packages("devtools")
devtools::install_github("timjmiller/wham", dependencies=TRUE)
devtools::install_github("timjmiller/wham", dependencies=TRUE)
install.packages("curl")
library(wham)
getwd()
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj)
setwd("C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj")
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
dir.create(write.dir)
write.dir <-"C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
dir.create(write.dir)
setwd(write.dir)
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
list.files()
devtools::install_github("timjmiller/wham", dependencies=TRUE)
library(wham)
write.dir <-"C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj"
dir.create(write.dir)
setwd(write.dir)
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
list.files()
write.dir <-"C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj/outputs"
dir.create(write.dir)
setwd(write.dir)
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
list.files()
wham.dir <- find.package("wham")
file.path(wham.dir, "example_scripts")
write.dir <-"C:/Users/swulfing/OneDrive - University of Massachusetts Dartmouth/Documents/YT_proj/outputs"
dir.create(write.dir)
setwd(write.dir)
wham.dir <- find.package("wham")
file.copy(from=file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"), to=write.dir, overwrite=FALSE)
list.files()
asap3 <- read_asap3_dat("ex1_SNEMAYT.dat")
?asap3
asap3
list.files(asap3)
list.files(file.path(wham.dir,"extdata","ex1_SNEMAYT.dat"))
devtools::install_github("lichengxue/wham-devel", dependencies=TRUE)
devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
devtools::install_github("lichengxue/whamMSE", dependencies=TRUE)
library(whamMSE)
#can you move an asap file into this
basic_info = asap3$basic_info # collect basic information
catch_info = asap3$catch_info # collect fleet catch information
index_info = asap3$index_info # collect survey information
F_info = asap3$F # collect fishing information
asap3
?generate_basic_info
#Assume bidirectional movement
basic_info <- generate_NAA_where(basic_info = basic_info, move.type = 2)
year_start  <- 1  # starting year in the burn-in period
year_end    <- 20  # end year in the burn-in period
MSE_years   <- 0     # number of years in the feedback loop
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "constant", Fmax = 0.4, Fmin = 0.2, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625,
fracyr_seasons = NULL,
fleet_pointer = NULL,
index_pointer = NULL,
user_waa = NULL,
user_maturity = NULL,
bias.correct.process = FALSE,
bias.correct.observation = FALSE,
bias.correct.BRPs = FALSE,
mig_type = 0,
XSPR_R_opt = 2,
move_dyn = 0, # natal homing is assumed
onto_move = 0,
onto_move_pars = NULL,
apply_re_trend = 0,
trend_re_rate = NULL,
apply_mu_trend = 0,
trend_mu_rate = NULL,
age_mu_devs = NULL)
info <- generate_basic_info(n_stocks = 2,
n_regions = 2,
n_indices = 2,
n_fleets = 2,
n_seasons = 4,
base.years = year_start:year_end,
n_feedback_years = MSE_years,
life_history = "medium",
n_ages = 12,
Fbar_ages = 12,
recruit_model = 2,
F_info = list(F.year1 = 0.2, Fhist = "constant", Fmax = 0.4, Fmin = 0.2, change_time = 0.5, user_F = NULL),
catch_info = list(catch_cv = 0.1, catch_Neff = 100),
index_info = list(index_cv = 0.1, index_Neff = 100, fracyr_indices = 0.625, q = 0.2),
fracyr_spawn = 0.625,
fracyr_seasons = NULL,
# fleet_pointer = NULL,
# index_pointer = NULL,
user_waa = NULL,
user_maturity = NULL,
bias.correct.process = FALSE,
bias.correct.observation = FALSE,
bias.correct.BRPs = FALSE,
mig_type = 0,
XSPR_R_opt = 2,
move_dyn = 0, # natal homing is assumed
onto_move = 0,
onto_move_pars = NULL,
apply_re_trend = 0,
trend_re_rate = NULL,
apply_mu_trend = 0,
trend_mu_rate = NULL,
age_mu_devs = NULL)
basic_info = info$basic_info # collect basic information
catch_info = info$catch_info # collect fleet catch information
index_info = info$index_info # collect survey information
F_info = info$F # collect fishing information
#Assume bidirectional movement
basic_info <- generate_NAA_where(basic_info = basic_info, move.type = 2)
move <- generate_move(basic_info = basic_info, move.type = 2, move.rate = c(0.3, 0.1), move.re = "constant") # Note: default is move = 0.3 (constant) for stock1 and 0.1 (constant) for the other stocks
n_stocks  <- as.integer(basic_info['n_stocks'])
n_regions <- as.integer(basic_info['n_regions'])
n_fleets  <- as.integer(basic_info['n_fleets'])
n_indices <- as.integer(basic_info['n_indices'])
n_ages    <- as.integer(basic_info['n_ages'])
# Selectivity Configuration
fleet_pars <- c(5,1)
index_pars <- c(2,1)
sel <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
# M Configuration
M <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
# Selectivity Configuration
fleet_pars <- c(5,1)
index_pars <- c(2,1)
sel <- list(model=rep("logistic",n_fleets+n_indices),
initial_pars=c(rep(list(fleet_pars),n_fleets),rep(list(index_pars),n_indices)))
# M Configuration
M <- list(model="constant",initial_means=array(0.2, dim = c(n_stocks,n_regions,n_ages)))
sigma        <- "rec+1"
re_cor       <- "iid"
ini.opt      <- "equilibrium" # option <- c("age-specific-fe", "equilibrium")
Rec_sig      <- 0.5 # (sigma for recruitment)
NAA_sig      <- 0.5 # (sigma for NAA)
sigma_vals = array(NAA_sig, dim = c(n_stocks, n_regions, n_ages)) # n_stocks x n_regions x n_ages
sigma_vals[,,1] = Rec_sig
# Set initial NAA for each stock
log_N1    <- rep(10,n_stocks)
log_N1[1] <- log(exp(10)*2) # N1_stock1 is 2 times higher than N1_stock2
N1_pars   <- generate_ini_N1(log_N1,basic_info,ini.opt)
# Set mean recruitment para. for each stock
mean_rec_par <- list()
for (i in 1:n_stocks) mean_rec_par[[i]] <- exp(log_N1[i])
NAA_re <- list(N1_model=rep(ini.opt,n_stocks),
sigma=rep(sigma,n_stocks),
cor=rep(re_cor,n_stocks),
recruit_model = 2,  # rec random around the mean
recruit_pars = mean_rec_par,
sigma_vals = sigma_vals,
N1_pars = N1_pars,
NAA_where = basic_info$NAA_where) # NAA_where must be specified in basic_info!
input <- prepare_wham_input(basic_info = basic_info,
selectivity = sel,
M = M,
NAA_re = NAA_re,
move = move,
catch_info = catch_info,
index_info = index_info,
F = F_info)
om <- fit_wham(input, do.fit = F, do.brps = T, MakeADFun.silent = TRUE)
self_sim_fit <- sim_fn(om, self.fit = TRUE)
# check convergence
check_convergence(self_sim_fit) # check the model convergence
input <- prepare_wham_input(basic_info = basic_info,
selectivity = sel,
M = M,
NAA_re = NAA_re,
move = move,
catch_info = catch_info,
index_info = index_info,
F = F_info)
om <- fit_wham(input, do.fit = F, do.brps = T, MakeADFun.silent = TRUE)
sim_fn <- function(om, self.fit = FALSE){
input <- om$input
input$data <- om$simulate(complete=TRUE)
# $simulate() is a function to generate datasets given the parameters defined in the OM
# Note: process error and observation error are both turned on when simulating datasets
# To turn them off, use basic_info$simulate_process_error = 0 and basic_info$simulate_observation_error = 0
if(self.fit) {
fit <- fit_wham(input, do.osa = FALSE, do.retro = FALSE, MakeADFun.silent = FALSE)
return(fit)
} else return(input)
}
# Note: turn on do.osa to calculate one-step-ahead residuals
# Note: turn on do.retro to calculate retrospective bias
set.seed(12345)
self_sim_fit <- sim_fn(om, self.fit = TRUE)
# check convergence
check_convergence(self_sim_fit) # check the model convergence
install.packages("vegan")
?diversity
??diversity
